#!/usr/bin/env node

'use strict';

const { program } = require('commander');
const { parse } = require('../lib/depsParser');
const { Tree, Node, printRow } = require('../lib/utils');
const version = require('../package.json').version;

program
.version(version)
.description('Help Information.')
.option('-i, --ignore <type>', 'ignored packages will not parse')
// .option('-c, --chart', 'show dependencies tree chart')
.parse(process.argv);

const options = program.opts();

let excludeDeps;
if (options.ignore) {
  excludeDeps = options.ignore.split(',').filter(item => !!item).map(item => item.trim());
  if (!excludeDeps.length) {
    excludeDeps = options.ignore.split(/\s/).filter(item => !!item);
  }
}

const result = parse({ excludeRootDeps: excludeDeps });

if (result) {
  const { list, map, packageName, rootSet, rootList } = result;
  if (rootList.length) {
    console.log()
    console.log(packageName)
    const tree = new Tree(packageName);
    rootList.forEach((item, index, rawList) => {
      console.log('|-', item);
      const packageNames = map[item];
      const node = new Node(item);
      node.isLast = index === rawList.length - 1;
      tree.addNode(node);
    
      printTree(node, packageNames);
      function printTree(parentNode, names) {
        names && names.forEach((name, index, rawList) => {
          const foundTargetNode = tree.findAncestorNode(parentNode, name); // 回溯是为了避免陷入循环依赖
          if (foundTargetNode) {
            return;
          }
          
          const subNames = map[name];
          const childNode = new Node(name);
          parentNode.addChild(childNode);
          const isLast = index === rawList.length - 1; // 是否本层级最后一个节点
          childNode.isLast = isLast;
          
          printRow(parentNode, name);
          
          if (subNames && subNames.length) {
            printTree(childNode, subNames);
          }
          else if (isLast) {
            parentNode && printRow(parentNode, name, false);
          }
        });
      }
    })
  }
}
